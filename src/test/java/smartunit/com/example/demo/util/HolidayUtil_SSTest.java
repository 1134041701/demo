/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.example.demo.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.example.demo.entity.Holiday;
import com.example.demo.util.HolidayUtil;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HolidayUtil_SSTest extends HolidayUtil_SSTest_scaffolding {
// allCoveredLines:[10, 40, 41, 76, 80, 82]

  @Test(timeout = 4000)
  public void test_getMonthHoliday_0()  throws Throwable  {
      //caseID:afb364ae5adb1645e3ed9eed37433c14
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          //CoveredLines: [40, 41, 76, 80, 82]
          //Input_0_Integer: 10
          //Input_1_Integer: 10
          //Assert: assertTrue(method_result.isEmpty());
          
          Integer integer0 = new Integer(10);
          
          //Call method: getMonthHoliday
          List<Holiday> list0 = HolidayUtil.getMonthHoliday(integer0, integer0);
          
          //Test Result Assert
          assertTrue(list0.isEmpty());
        } catch(Throwable t) {
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test_parseHolidayTimeQuery_1()  throws Throwable  {
      //caseID:7e1fd5d5284873e151b28d25a53a6cce
      //CoveredLines: [10, 80, 82]
      //Input_0_Integer: (-1)
      //Input_1_Integer: (-1)
      //Assert: assertEquals("-1%E5%B9%B4-1%E6%9C%88", method_result);
      
      HolidayUtil holidayUtil0 = new HolidayUtil();
      Integer integer0 = new Integer((-1));
      
      //Call method: parseHolidayTimeQuery
      String string0 = HolidayUtil.parseHolidayTimeQuery(integer0, integer0);
      
      //Test Result Assert
      assertEquals("-1%E5%B9%B4-1%E6%9C%88", string0);
  }
}
