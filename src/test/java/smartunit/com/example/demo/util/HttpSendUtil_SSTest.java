/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.example.demo.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.example.demo.util.HttpBody;
import com.example.demo.util.HttpSendUtil;
import com.example.demo.util.KeyValuePair;
import com.example.demo.util.SimpleFormDataPair;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HeaderIterator;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpOptions;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HttpSendUtil_SSTest extends HttpSendUtil_SSTest_scaffolding {
// allCoveredLines:[26, 34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 113, 114, 115, 116, 119, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 147, 150, 153, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 169, 170, 171, 174, 175, 176, 179, 180, 184, 185, 186, 192, 201, 202, 203, 204, 205, 207, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226]

  @Test(timeout = 4000)
  public void test_constructNameValuePairs_00()  throws Throwable  {
      //caseID:9a262013f4f8c915b38c50fc0b83b643
      //CoveredLines: [26, 201, 202, 203, 204, 207, 209]
      //Input_0_List<com.example.demo.util.KeyValuePair>: linkedList0
      //Assert: assertEquals(0, method_result.size());
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      LinkedList<KeyValuePair> linkedList0 = new LinkedList<KeyValuePair>();
      //mock keyValuePair0
      KeyValuePair keyValuePair0 = mock(KeyValuePair.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(keyValuePair0);
      
      //Call method: constructNameValuePairs
      List<NameValuePair> list0 = (List<NameValuePair>)PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "constructNameValuePairs", (Object) linkedList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_main_01()  throws Throwable  {
      //caseID:5d6f2189e1f21c68764710046cdbf7df
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          //CoveredLines: [47, 48, 50, 51, 53, 58, 59, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 150, 153, 154, 163, 164, 165, 166, 167, 169, 170, 171, 174, 175, 176, 192, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226]
          //Input_0_String[]: stringArray0
          
          String[] stringArray0 = new String[0];
          
          //Call method: main
          HttpSendUtil.main(stringArray0);
          
          //Test Result Assert
          assertEquals(0, stringArray0.length);
        } catch(Throwable t) {
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test_readResponseHeaders_02()  throws Throwable  {
      //caseID:c482c596e2ca44ffdd794edf46342ca3
      //CoveredLines: [26, 113, 114, 115, 116]
      //Input_0_org.apache.http.HttpResponse: {getAllHeaders=headerArray0}
      //Input_1_Map<String, String>: {}
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      Header[] headerArray0 = new Header[3];
      //mock httpResponse0
      HttpResponse httpResponse0 = mock(HttpResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(headerArray0).when(httpResponse0).getAllHeaders();
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: readResponseHeaders
      try { 
        PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "readResponseHeaders", (Object) httpResponse0, (Class<?>) HttpResponse.class, (Object) map0, (Class<?>) Map.class);
      } catch(Throwable e) {
         verifyException("com.example.demo.util.HttpSendUtil", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_readResponseHeaders_03()  throws Throwable  {
      //caseID:6158e5a1e7f0e5a1c01c3e7dbfb9de4a
      //CoveredLines: [26, 113, 114, 119]
      //Input_0_org.apache.http.HttpResponse: {}
      //Input_1_Map<String, String>: {}
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpResponse0
      HttpResponse httpResponse0 = mock(HttpResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: readResponseHeaders
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "readResponseHeaders", (Object) httpResponse0, (Class<?>) HttpResponse.class, (Object) map0, (Class<?>) Map.class);
  }

  @Test(timeout = 4000)
  public void test_readResponseHeaders_04()  throws Throwable  {
      //caseID:4e263bd04ad19ed3d61b8568d086dce3
      //CoveredLines: [26, 113, 114, 115, 119]
      //Input_0_org.apache.http.HttpResponse: {getAllHeaders=headerArray0}
      //Input_1_Map<String, String>: {}
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      Header[] headerArray0 = new Header[0];
      //mock httpResponse0
      HttpResponse httpResponse0 = mock(HttpResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(headerArray0).when(httpResponse0).getAllHeaders();
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: readResponseHeaders
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "readResponseHeaders", (Object) httpResponse0, (Class<?>) HttpResponse.class, (Object) map0, (Class<?>) Map.class);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_05()  throws Throwable  {
      //caseID:0635a90f7d5996a9aff0e8bc9f33050e
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 70, 97, 102, 104, 107]
      //Input_0_String: )jS]2
      //Input_1_String: )jS]2
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_Map<String, Object>: hashMap1
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest(")jS]2", ")jS]2", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_06()  throws Throwable  {
      //caseID:6c3c7700b4c9e1eeb52f49e0a2eb541d
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 67, 68, 73, 74, 76, 78, 80, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 129, 132, 133, 137, 141, 142, 143, 144, 147, 150]
      //Input_0_String: DELETE
      //Input_1_String: DELETE
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_Map<String, Object>: hashMap1
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("DELETE", "DELETE", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_07()  throws Throwable  {
      //caseID:9a8cf1ac22f357306640c6c744c9d6cf
      //CoveredLines: [47, 48, 50, 51, 53, 55, 56, 73, 74, 76, 78, 80, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 150]
      //Input_0_String: GET
      //Input_1_String: 
      //Input_2_Map<String, String>: {get=\"-583905355\" \"3\" \"1.0\" \"->\", keySet=set0 set0}
      //Input_3_Map<String, String>: {get=\"-583905355\" \"3\" \"1.0\" \"->\", keySet=set0 set0}
      //Input_4_HttpBody: {}
      //Input_5_String: 0*`X
      //Assert: assertNull(method_result);
      
      HttpOptions httpOptions0 = new HttpOptions("");
      HeaderElement[] headerElementArray0 = new HeaderElement[2];
      //mock headerElement0
      HeaderElement headerElement0 = mock(HeaderElement.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("s.JgbC %2#~").when(headerElement0).getName();
      headerElementArray0[0] = headerElement0;
      //mock headerElement1
      HeaderElement headerElement1 = mock(HeaderElement.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(headerElement1).getName();
      headerElementArray0[1] = headerElement1;
      //mock header0
      Header header0 = mock(Header.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(headerElementArray0).when(header0).getElements();
      //mock headerIterator0
      HeaderIterator headerIterator0 = mock(HeaderIterator.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true, false).when(headerIterator0).hasNext();
      doReturn(header0).when(headerIterator0).nextHeader();
      //mock httpResponse0
      HttpResponse httpResponse0 = mock(HttpResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(headerIterator0).when(httpResponse0).headerIterator(anyString());
      
      Set<String> set0 = httpOptions0.getAllowedMethods(httpResponse0);
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-583905355", "3", "1.0", "->").when(map0).get(any());
      doReturn(set0, set0).when(map0).keySet();
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: sendRequest
      Map<String, String> map1 = HttpSendUtil.sendRequest("GET", "", map0, map0, httpBody0, "0*`X");
      
      //Test Result Assert
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_08()  throws Throwable  {
      //caseID:ca86363dff0c2fe7fb826416524f8871
      //CoveredLines: [47, 48, 50, 51, 53, 61, 62, 73, 74, 76, 78, 80, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 150]
      //Input_0_String: HEAD
      //Input_1_String: form-data
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_HttpBody: {}
      //Input_5_String: zentaosid=5d34c992e02c19145b1fb67858d06012;
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      hashMap0.put("Cookie", " << ");
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("HEAD", "form-data", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, httpBody0, "zentaosid=5d34c992e02c19145b1fb67858d06012;");
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_09()  throws Throwable  {
      //caseID:8383201aa2f5d3024548827ae6f0ac76
      //CoveredLines: [47, 48, 50, 51, 53, 64, 65, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 150, 153, 154, 192]
      //Input_0_String: PUT
      //Input_1_String: 1763073811
      //Input_2_Map<String, String>: {keySet=set0}
      //Input_3_Map<String, String>: {keySet=set0}
      //Input_4_HttpBody: {}
      //Input_5_String: jM=
      //Assert: assertNull(method_result);
      
      
      Charset charset0 = Charset.defaultCharset();
      
      Set<String> set0 = charset0.aliases();
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(set0).when(map0).keySet();
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: sendRequest
      Map<String, String> map1 = HttpSendUtil.sendRequest("PUT", "1763073811", map0, map0, httpBody0, "jM=");
      
      //Test Result Assert
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_10()  throws Throwable  {
      //caseID:aa337088505e4db48a8ee668d8e82b59
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 58, 59, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 129, 132, 133, 137, 141, 142, 143, 144, 147, 150, 153, 154, 184, 192]
      //Input_0_String: POST
      //Input_1_String: POST
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap1
      //Input_4_Map<String, Object>: null
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("POST", "POST", (Map<String, String>) hashMap0, (Map<String, String>) hashMap1, (Map<String, Object>) null);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_11()  throws Throwable  {
      //caseID:310b8d80a0ea2b4ad6ee9d256d09eb9e
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 58, 59, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 129, 132, 133, 137, 141, 142, 143, 144, 147, 150, 153, 154, 184, 185, 186, 192]
      //Input_0_String: POST
      //Input_1_String: POST
      //Input_2_Map<String, String>: null
      //Input_3_Map<String, String>: hashMap0
      //Input_4_Map<String, Object>: hashMap1
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("POST", "POST", (Map<String, String>) null, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_12()  throws Throwable  {
      //caseID:7574621c69d23bf31a19476838fcdeaa
      //CoveredLines: [26, 34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 58, 59, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 129, 132, 133, 137, 141, 142, 143, 144, 147, 150, 153, 154, 184, 185, 186, 192]
      //Input_0_String: POST
      //Input_1_String: POST
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_Map<String, Object>: hashMap1
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("POST", "POST", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_13()  throws Throwable  {
      //caseID:5bf2d1def95a9a809f00aa327b47f80c
      //CoveredLines: [40, 41, 42, 47, 48, 50, 51, 53, 64, 65, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 150, 153, 154, 184, 185, 186, 192]
      //Input_0_String: PUT
      //Input_1_String: org.apache.http.impl.conn.CPoolEntry
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_String: 6R
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      
      hashMap0.put("", "7,&._NTuC%SRH");
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("PUT", "org.apache.http.impl.conn.CPoolEntry", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, "6R");
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_14()  throws Throwable  {
      //caseID:0ea7d3bdac5dbcc8656f1f561462edab
      //CoveredLines: [40, 41, 42, 47, 48, 50, 51, 53, 64, 65, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 150, 153, 154, 184, 185, 186, 192]
      //Input_0_String: PUT
      //Input_1_String: ?
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_String: 6R
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      
      hashMap0.put("Aborting to protect against StackOverflowError - output of one loop is the input of another", "POST");
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("PUT", "?", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, "6R");
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_15()  throws Throwable  {
      //caseID:31e159fb4dbb2405032063b6801449f3
      //CoveredLines: [26, 153, 154, 179, 192]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {}
      //Input_2_String: raw
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "raw", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_16()  throws Throwable  {
      //caseID:14fa4ceae6aa6ecddb44524e7d433248
      //CoveredLines: [26, 153, 154, 179, 180, 192]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getRaw=\"1.0\"}
      //Input_2_String: raw
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(httpBody0).getRaw();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "raw", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_17()  throws Throwable  {
      //caseID:1890998893440a7f01a5034f2f27890f
      //CoveredLines: [26, 153, 154, 156, 157, 192, 201, 202, 209]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getRaw=\"?\" (String) null}
      //Input_2_String: x-www-form-urlencoded
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("?", (String) null).when(httpBody0).getRaw();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "x-www-form-urlencoded", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_18()  throws Throwable  {
      //caseID:9a44f36f0ee06fed3cbb78e1cdb28c85
      //CoveredLines: [26, 153, 154, 156, 157, 192, 201, 202, 203, 209]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getUrlEncodedPairs=linkedList0}
      //Input_2_String: x-www-form-urlencoded
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<KeyValuePair> linkedList0 = new LinkedList<KeyValuePair>();
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(httpBody0).getUrlEncodedPairs();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "x-www-form-urlencoded", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_19()  throws Throwable  {
      //caseID:5f23661e9e08f8662ae0a7e908978a75
      //CoveredLines: [26, 153, 154, 163, 164, 165, 166, 174, 175, 176, 192]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getFormDataPairs=linkedList0 linkedList0 linkedList0}
      //Input_2_String: form-data
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<SimpleFormDataPair> linkedList0 = new LinkedList<SimpleFormDataPair>();
      //mock simpleFormDataPair0
      SimpleFormDataPair simpleFormDataPair0 = mock(SimpleFormDataPair.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("872426169").when(simpleFormDataPair0).getKey();
      doReturn((String) null).when(simpleFormDataPair0).getValue();
      
      linkedList0.add(simpleFormDataPair0);
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0, linkedList0, linkedList0).when(httpBody0).getFormDataPairs();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "form-data", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_20()  throws Throwable  {
      //caseID:86f43cdb44fad96041e43ca12afdb186
      //CoveredLines: [26, 153, 154, 163, 164, 165, 166, 167, 169, 174, 175, 176, 192]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getFormDataPairs=linkedList0 linkedList0 linkedList0}
      //Input_2_String: form-data
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<SimpleFormDataPair> linkedList0 = new LinkedList<SimpleFormDataPair>();
      //mock simpleFormDataPair0
      SimpleFormDataPair simpleFormDataPair0 = mock(SimpleFormDataPair.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2").when(simpleFormDataPair0).getKey();
      doReturn("2").when(simpleFormDataPair0).getValue();
      
      linkedList0.add(simpleFormDataPair0);
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0, linkedList0, linkedList0).when(httpBody0).getFormDataPairs();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "form-data", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_21()  throws Throwable  {
      //caseID:5dfb854d594c1bda139ee27784f4f6c6
      //CoveredLines: [26, 153, 154, 156, 157, 158, 159, 160, 192, 201, 202, 203, 204, 205, 207, 209]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getUrlEncodedPairs=linkedList0}
      //Input_2_String: x-www-form-urlencoded
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<KeyValuePair> linkedList0 = new LinkedList<KeyValuePair>();
      //mock keyValuePair0
      KeyValuePair keyValuePair0 = mock(KeyValuePair.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-977747791", "text/plain").when(keyValuePair0).getKey();
      doReturn("\u53D1\u9001\u8BF7\u6C42\u5931\u8D25! \u8BF7\u6C42\u4FE1\u606F\uFF1A{}").when(keyValuePair0).getValue();
      
      linkedList0.add(keyValuePair0);
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(httpBody0).getUrlEncodedPairs();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "x-www-form-urlencoded", (Class<?>) String.class);
  }
}
