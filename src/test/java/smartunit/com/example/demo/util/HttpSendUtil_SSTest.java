/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.example.demo.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.example.demo.util.HttpBody;
import com.example.demo.util.HttpSendUtil;
import com.example.demo.util.KeyValuePair;
import com.example.demo.util.SimpleFormDataPair;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HttpSendUtil_SSTest extends HttpSendUtil_SSTest_scaffolding {
// allCoveredLines:[26, 34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 113, 114, 115, 116, 119, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 147, 150, 153, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 169, 170, 171, 174, 175, 176, 179, 180, 184, 185, 186, 192, 201, 202, 203, 204, 205, 207, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226]

  @Test(timeout = 4000)
  public void test_main_00()  throws Throwable  {
      //caseID:2dd517f148751a72d75159bf3e16683f
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          //CoveredLines: [26, 47, 48, 50, 51, 53, 58, 59, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 150, 153, 154, 163, 164, 165, 166, 167, 169, 170, 171, 174, 175, 176, 192, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226]
          //Input_0_String[]: stringArray0
          
          HttpSendUtil httpSendUtil0 = new HttpSendUtil();
          String[] stringArray0 = new String[3];
          
          //Call method: main
          HttpSendUtil.main(stringArray0);
          
          //Test Result Assert
          assertEquals(3, stringArray0.length);
        } catch(Throwable t) {
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test_readResponseHeaders_01()  throws Throwable  {
      //caseID:60486e23d38c148819d624238610b62e
      //CoveredLines: [26, 113, 114, 115, 116]
      //Input_0_org.apache.http.HttpResponse: {getAllHeaders=headerArray0}
      //Input_1_Map<String, String>: {}
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      Header[] headerArray0 = new Header[2];
      //mock httpResponse0
      HttpResponse httpResponse0 = mock(HttpResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(headerArray0).when(httpResponse0).getAllHeaders();
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: readResponseHeaders
      try { 
        PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "readResponseHeaders", (Object) httpResponse0, (Class<?>) HttpResponse.class, (Object) map0, (Class<?>) Map.class);
      } catch(Throwable e) {
         verifyException("com.example.demo.util.HttpSendUtil", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_readResponseHeaders_02()  throws Throwable  {
      //caseID:367104d1e0432062caf29bd892a36ef0
      //CoveredLines: [26, 113, 114, 119]
      //Input_0_org.apache.http.HttpResponse: {}
      //Input_1_Map<String, String>: {}
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpResponse0
      HttpResponse httpResponse0 = mock(HttpResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: readResponseHeaders
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "readResponseHeaders", (Object) httpResponse0, (Class<?>) HttpResponse.class, (Object) map0, (Class<?>) Map.class);
  }

  @Test(timeout = 4000)
  public void test_readResponseHeaders_03()  throws Throwable  {
      //caseID:b9025756c806400e5c120797fbf086c1
      //CoveredLines: [26, 113, 114, 115, 119]
      //Input_0_org.apache.http.HttpResponse: {getAllHeaders=headerArray0}
      //Input_1_Map<String, String>: hashMap0
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      Header[] headerArray0 = new Header[0];
      //mock httpResponse0
      HttpResponse httpResponse0 = mock(HttpResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(headerArray0).when(httpResponse0).getAllHeaders();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      
      //Call method: readResponseHeaders
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "readResponseHeaders", (Object) httpResponse0, (Class<?>) HttpResponse.class, (Object) hashMap0, (Class<?>) Map.class);
      
      //Test Result Assert
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test_sendRequest_04()  throws Throwable  {
      //caseID:4341af41b13b0615c52dc89c84243c70
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 70, 97, 102, 104, 107]
      //Input_0_String: Cookie
      //Input_1_String: Cookie
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_Map<String, Object>: null
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("Cookie", "Cookie", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, (Map<String, Object>) null);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_05()  throws Throwable  {
      //caseID:ca03a15c923905e38b6cf16a365ebe04
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 70, 97, 102, 104, 107]
      //Input_0_String: 3
      //Input_1_String: 3
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_Map<String, Object>: hashMap1
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("3", "3", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_06()  throws Throwable  {
      //caseID:0f6ec7667e6d55064a1408d1c8af9958
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 55, 56, 73, 74, 76, 78, 80, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 129, 141, 150]
      //Input_0_String: GET
      //Input_1_String: -*
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: null
      //Input_4_Map<String, Object>: hashMap1
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("GET", "-*", (Map<String, String>) hashMap0, (Map<String, String>) null, (Map<String, Object>) hashMap1);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_07()  throws Throwable  {
      //caseID:2497b8ad885f956040dbfe3a2af95b75
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 67, 68, 73, 74, 76, 78, 80, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 129, 132, 133, 137, 141, 142, 143, 144, 145, 150]
      //Input_0_String: DELETE
      //Input_1_String: ?
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_Map<String, Object>: hashMap1
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("DELETE", "?", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_08()  throws Throwable  {
      //caseID:156e1d374e04cbe60f3cf3cac6140b61
      //CoveredLines: [40, 41, 42, 47, 48, 50, 51, 53, 64, 65, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 129, 132, 133, 137, 141, 142, 143, 144, 147, 150, 153, 154, 184, 192]
      //Input_0_String: PUT
      //Input_1_String: PUT
      //Input_2_Map<String, String>: {keySet=set0 set0}
      //Input_3_Map<String, String>: {keySet=set0 set0}
      //Input_4_String: 
      //Assert: assertNull(method_result);
      
      Locale locale0 = Locale.TAIWAN;
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(set0, set0).when(map0).keySet();
      
      //Call method: sendRequest
      Map<String, String> map1 = HttpSendUtil.sendRequest("PUT", "PUT", map0, map0, "");
      
      //Test Result Assert
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_09()  throws Throwable  {
      //caseID:365f2a59050de7131365d50ceec9187d
      //CoveredLines: [47, 48, 50, 51, 53, 58, 59, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 150, 153, 154, 192]
      //Input_0_String: POST
      //Input_1_String: org.apache.http.impl.cookie.DefaultCookieSpecProvider
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_HttpBody: {}
      //Input_5_String: 2213344
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      hashMap0.put("org.assertj.core.extractor.ToStringExtractor", "wc6$aIf0!g");
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("POST", "org.apache.http.impl.cookie.DefaultCookieSpecProvider", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, httpBody0, "2213344");
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_10()  throws Throwable  {
      //caseID:ff5c653cd51dff112da6ca69be4bea61
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 61, 62, 73, 74, 76, 78, 80, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 150]
      //Input_0_String: HEAD
      //Input_1_String: -*
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_Map<String, Object>: hashMap1
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      
      hashMap0.put("HEAD", "-*");
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("HEAD", "-*", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_11()  throws Throwable  {
      //caseID:e4c8917df6dc35327b8a41c17a7589fc
      //CoveredLines: [26, 34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 55, 56, 73, 74, 76, 78, 80, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 150]
      //Input_0_String: GET
      //Input_1_String: -*
      //Input_2_Map<String, String>: hashMap0
      //Input_3_Map<String, String>: hashMap0
      //Input_4_Map<String, Object>: hashMap1
      //Assert: assertNull(method_result);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      
      hashMap0.put("-*", "6");
      
      hashMap0.put("", "xi6/m_M");
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      
      //Call method: sendRequest
      Map<String, String> map0 = HttpSendUtil.sendRequest("GET", "-*", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_sendRequest_12()  throws Throwable  {
      //caseID:8dd5dab8f708dbc6191f8e25cfaf1515
      //CoveredLines: [34, 35, 40, 41, 42, 47, 48, 50, 51, 53, 64, 65, 73, 74, 76, 78, 80, 81, 83, 93, 94, 97, 102, 104, 107, 109, 122, 123, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 150, 153, 154, 184, 185, 186, 192]
      //Input_0_String: PUT
      //Input_1_String: ?
      //Input_2_Map<String, String>: {get=\"?\" \"org.apache.http.conn.routing.RouteTracker\" \"PUT\" \"?\", keySet=set0 set0}
      //Input_3_Map<String, String>: {get=\"?\" \"org.apache.http.conn.routing.RouteTracker\" \"PUT\" \"?\", keySet=set0 set0}
      //Input_4_Map<String, Object>: hashMap0
      //Assert: assertNull(method_result);
      
      
      Charset charset0 = Charset.defaultCharset();
      
      Set<String> set0 = charset0.aliases();
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("?", "org.apache.http.conn.routing.RouteTracker", "PUT", "?").when(map0).get(any());
      doReturn(set0, set0).when(map0).keySet();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      
      //Call method: sendRequest
      Map<String, String> map1 = HttpSendUtil.sendRequest("PUT", "?", map0, map0, (Map<String, Object>) hashMap0);
      
      //Test Result Assert
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_13()  throws Throwable  {
      //caseID:28c7e9854495485ae5933ee360170388
      //CoveredLines: [26, 153, 154, 179, 192]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {}
      //Input_2_String: raw
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "raw", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_14()  throws Throwable  {
      //caseID:734036ad3295ecd13e9282b3ae6c4b5e
      //CoveredLines: [26, 153, 154, 179, 180, 192]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getRaw=\"?\"}
      //Input_2_String: raw
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("?").when(httpBody0).getRaw();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "raw", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_15()  throws Throwable  {
      //caseID:7fbb56345c5400e81c069e2aa59d9cf0
      //CoveredLines: [26, 153, 154, 156, 157, 192, 201, 202, 209]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getRaw=\"112680\" (String) null}
      //Input_2_String: x-www-form-urlencoded
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("112680", (String) null).when(httpBody0).getRaw();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "x-www-form-urlencoded", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_16()  throws Throwable  {
      //caseID:30fdbc00c007743cce8c2709e09275e0
      //CoveredLines: [26, 153, 154, 156, 157, 192, 201, 202, 203, 204, 207, 209]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getUrlEncodedPairs=linkedList0}
      //Input_2_String: x-www-form-urlencoded
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<KeyValuePair> linkedList0 = new LinkedList<KeyValuePair>();
      //mock keyValuePair0
      KeyValuePair keyValuePair0 = mock(KeyValuePair.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((String) null).when(keyValuePair0).getKey();
      
      linkedList0.add(keyValuePair0);
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(httpBody0).getUrlEncodedPairs();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "x-www-form-urlencoded", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_17()  throws Throwable  {
      //caseID:bb5078ff10e797af5267b08314f98bf5
      //CoveredLines: [26, 153, 154, 163, 164, 165, 166, 167, 169, 174, 175, 176, 192]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getFormDataPairs=linkedList0 linkedList0 linkedList0}
      //Input_2_String: form-data
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<SimpleFormDataPair> linkedList0 = new LinkedList<SimpleFormDataPair>();
      //mock simpleFormDataPair0
      SimpleFormDataPair simpleFormDataPair0 = mock(SimpleFormDataPair.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1982131779").when(simpleFormDataPair0).getKey();
      doReturn("`").when(simpleFormDataPair0).getValue();
      doReturn("2203994", "672756221").when(simpleFormDataPair0).getType();
      
      linkedList0.add(simpleFormDataPair0);
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0, linkedList0, linkedList0).when(httpBody0).getFormDataPairs();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "form-data", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_18()  throws Throwable  {
      //caseID:4f70872e512585d0b15e7f7b54a68f41
      //CoveredLines: [26, 153, 154, 156, 157, 158, 159, 160, 192, 201, 202, 203, 204, 205, 207, 209]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getUrlEncodedPairs=linkedList0}
      //Input_2_String: x-www-form-urlencoded
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<KeyValuePair> linkedList0 = new LinkedList<KeyValuePair>();
      //mock keyValuePair0
      KeyValuePair keyValuePair0 = mock(KeyValuePair.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(keyValuePair0);
      //mock keyValuePair1
      KeyValuePair keyValuePair1 = mock(KeyValuePair.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("79599").when(keyValuePair1).getKey();
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(httpBody0).getUrlEncodedPairs();
      
      linkedList0.add(keyValuePair1);
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "x-www-form-urlencoded", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_setRequestBody_19()  throws Throwable  {
      //caseID:c1b79ee06c888ebc009f87e8fd8027d8
      //CoveredLines: [26, 153, 154, 156, 157, 158, 159, 160, 192, 201, 202, 203, 204, 205, 207, 209]
      //Input_0_org.apache.http.client.methods.HttpEntityEnclosingRequestBase: {}
      //Input_1_com.example.demo.util.HttpBody: {getUrlEncodedPairs=linkedList0}
      //Input_2_String: x-www-form-urlencoded
      
      HttpSendUtil httpSendUtil0 = new HttpSendUtil();
      //mock httpEntityEnclosingRequestBase0
      HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase0 = mock(HttpEntityEnclosingRequestBase.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<KeyValuePair> linkedList0 = new LinkedList<KeyValuePair>();
      //mock keyValuePair0
      KeyValuePair keyValuePair0 = mock(KeyValuePair.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Maximum header count exceeded").when(keyValuePair0).getKey();
      
      linkedList0.add(keyValuePair0);
      //mock httpBody0
      HttpBody httpBody0 = mock(HttpBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(httpBody0).getUrlEncodedPairs();
      
      //Call method: setRequestBody
      PrivateAccess.callMethod((Class<HttpSendUtil>) HttpSendUtil.class, httpSendUtil0, "setRequestBody", (Object) httpEntityEnclosingRequestBase0, (Class<?>) HttpEntityEnclosingRequestBase.class, (Object) httpBody0, (Class<?>) HttpBody.class, (Object) "x-www-form-urlencoded", (Class<?>) String.class);
  }
}
