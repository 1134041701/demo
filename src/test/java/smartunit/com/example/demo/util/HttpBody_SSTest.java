/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.example.demo.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.example.demo.util.HttpBody;
import com.example.demo.util.KeyValuePair;
import com.example.demo.util.SimpleFormDataPair;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HttpBody_SSTest extends HttpBody_SSTest_scaffolding {
// allCoveredLines:[14, 16, 18, 20, 22]

  @Test(timeout = 4000)
  public void test_equals_0()  throws Throwable  {
      //caseID:609057233d60d301550090f0cb8c63b1
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14]
      //Input_0_Object: httpBody0
      //Assert: assertTrue(method_result);
      
      HttpBody httpBody0 = new HttpBody();
      
      //Call method: equals
      boolean boolean0 = httpBody0.equals(httpBody0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_1()  throws Throwable  {
      //caseID:f6a435eaa654e4d52c76de9a7d5dcbb1
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14]
      //Input_0_Object: , urlEncodedPairs=
      //Assert: assertFalse(method_result);
      
      HttpBody httpBody0 = new HttpBody();
      
      //Call method: equals
      boolean boolean0 = httpBody0.equals(", urlEncodedPairs=");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_2()  throws Throwable  {
      //caseID:a665778c1af6f170960a1b77cde0b21c
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 18, 20, 22]
      //Input_0_Object: httpBody0
      //Assert: assertTrue(method_result);
      
      HttpBody httpBody0 = new HttpBody();
      HttpBody httpBody1 = new HttpBody();
      
      //Call method: equals
      boolean boolean0 = httpBody1.equals(httpBody0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_3()  throws Throwable  {
      //caseID:8952d38c6b81846fd1bbf64a76055008
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 18, 20, 22]
      //Input_0_Object: httpBody1
      //Assert: assertTrue(method_result);
      
      HttpBody httpBody0 = new HttpBody();
      HttpBody httpBody1 = new HttpBody();
      
      //Call method: equals
      boolean boolean0 = httpBody0.equals(httpBody1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:e7c33ee791069628e8beac09cf079cc9
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 18, 20, 22]
      
      HttpBody httpBody0 = new HttpBody();
      
      //Call method: hashCode
      httpBody0.hashCode();
  }

  @Test(timeout = 4000)
  public void test_setFormDataPairs_5()  throws Throwable  {
      //caseID:31248619aed5ad5e4c5886ab8fda5066
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14]
      //Input_0_List<SimpleFormDataPair>: linkedList0
      
      HttpBody httpBody0 = new HttpBody();
      LinkedList<SimpleFormDataPair> linkedList0 = new LinkedList<SimpleFormDataPair>();
      
      //Call method: setFormDataPairs
      httpBody0.setFormDataPairs(linkedList0);
      
      //Test Result Assert
      assertNull(httpBody0.getRaw());
  }

  @Test(timeout = 4000)
  public void test_setJsonData_6()  throws Throwable  {
      //caseID:e1bbb19dbb0d65b966a2f0761d9a3b34
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14]
      //Input_0_String: zSv+m2T`^mk#P$pXsT]
      
      HttpBody httpBody0 = new HttpBody();
      
      //Call method: setJsonData
      httpBody0.setJsonData("zSv+m2T`^mk#P$pXsT]");
      
      //Test Result Assert
      assertEquals("zSv+m2T`^mk#P$pXsT]", httpBody0.getJsonData());
  }

  @Test(timeout = 4000)
  public void test_setRaw_7()  throws Throwable  {
      //caseID:dfc8805dff408751859bd662bca1e8fd
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14]
      //Input_0_String: Upgrade
      
      HttpBody httpBody0 = new HttpBody();
      
      //Call method: setRaw
      httpBody0.setRaw("Upgrade");
      
      //Test Result Assert
      assertNull(httpBody0.getJsonData());
  }

  @Test(timeout = 4000)
  public void test_setUrlEncodedPairs_8()  throws Throwable  {
      //caseID:0c428c2ece5d770d430e302f239fd972
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14]
      //Input_0_List<KeyValuePair>: linkedList0
      
      HttpBody httpBody0 = new HttpBody();
      LinkedList<KeyValuePair> linkedList0 = new LinkedList<KeyValuePair>();
      
      //Call method: setUrlEncodedPairs
      httpBody0.setUrlEncodedPairs(linkedList0);
      
      //Test Result Assert
      assertNull(httpBody0.getJsonData());
  }

  @Test(timeout = 4000)
  public void test_toString_9()  throws Throwable  {
      //caseID:2dcc314fff58917dcf8c61aa47c1f45e
      //CoveredLines: [14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 18, 20, 22]
      //Assert: assertEquals("HttpBody(raw=null, jsonData=null, urlEncodedPairs=null, formDataPairs=null)", method_result);
      
      HttpBody httpBody0 = new HttpBody();
      
      //Call method: toString
      String string0 = httpBody0.toString();
      
      //Test Result Assert
      assertEquals("HttpBody(raw=null, jsonData=null, urlEncodedPairs=null, formDataPairs=null)", string0);
  }
}
